// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialMediaForModelers.Data;

namespace SocialMediaForModelers.Migrations
{
    [DbContext(typeof(SMModelersContext))]
    [Migration("20201016212046_applicationUserConnectsToAListOfPages")]
    partial class applicationUserConnectsToAListOfPages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialMediaForModelers.Model.AppUserFriend", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = "564fe961-1541-4066-9533-d2d316759ab3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e59f85a3-46b6-4e38-8ea5-ebc0022ec67e",
                            DOB = new DateTime(1982, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "stubbste@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Trevor",
                            LastName = "Stubbs",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "576d6bc3-9c18-437f-b4d9-740defc36dbf",
                            TwoFactorEnabled = false,
                            UserName = "stubbste@gmail.com"
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.CommentLike", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PostCommentID")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("PostCommentID");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.Entities.JoinEntites.PostToComment", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("PostCommentID")
                        .HasColumnType("int");

                    b.Property<int?>("UserPostID")
                        .HasColumnType("int");

                    b.HasKey("PostId", "CommentId");

                    b.HasIndex("PostCommentID");

                    b.HasIndex("UserPostID");

                    b.ToTable("PostToComments");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CommentId = 1
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.Entities.JoinEntites.PostToImage", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("PostImageID")
                        .HasColumnType("int");

                    b.Property<int?>("UserPostID")
                        .HasColumnType("int");

                    b.HasKey("PostId", "ImageId");

                    b.HasIndex("PostImageID");

                    b.HasIndex("UserPostID");

                    b.ToTable("PostToImages");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            ImageId = 1
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.Entities.JoinEntites.UserPageToPost", b =>
                {
                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserPageID")
                        .HasColumnType("int");

                    b.Property<int?>("UserPostID")
                        .HasColumnType("int");

                    b.HasKey("PageId", "PostId");

                    b.HasIndex("UserPageID");

                    b.HasIndex("UserPostID");

                    b.ToTable("UserPageToPosts");

                    b.HasData(
                        new
                        {
                            PageId = 1,
                            PostId = 1
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.PageLike", b =>
                {
                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserPageID")
                        .HasColumnType("int");

                    b.HasKey("PageId", "UserId");

                    b.HasIndex("UserPageID");

                    b.ToTable("PageLikes");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.PostComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PostComments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Body = "I am a comment",
                            UserId = "1234"
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.PostImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PostImages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ImageURI = "/Dog.png",
                            UserId = "1234"
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.PostLike", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserPostID")
                        .HasColumnType("int");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserPostID");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.UserPage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserPages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PageContent = "I am I here",
                            PageName = "Seed Page",
                            UserId = "1234"
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.UserPost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserPosts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Caption = "This is my post",
                            UserId = "1234"
                        });
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.AppUserFriend", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.ApplicationUser", "AppUser")
                        .WithMany("UserFriends")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.CommentLike", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.PostComment", "PostComment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("PostCommentID");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.Entities.JoinEntites.PostToComment", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.PostComment", null)
                        .WithMany("PostToComments")
                        .HasForeignKey("PostCommentID");

                    b.HasOne("SocialMediaForModelers.Model.UserPost", null)
                        .WithMany("PostComments")
                        .HasForeignKey("UserPostID");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.Entities.JoinEntites.PostToImage", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.PostImage", "PostImage")
                        .WithMany("PostToImages")
                        .HasForeignKey("PostImageID");

                    b.HasOne("SocialMediaForModelers.Model.UserPost", "UserPost")
                        .WithMany("PostImages")
                        .HasForeignKey("UserPostID");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.Entities.JoinEntites.UserPageToPost", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.UserPage", "UserPage")
                        .WithMany("PageToPost")
                        .HasForeignKey("UserPageID");

                    b.HasOne("SocialMediaForModelers.Model.UserPost", "UserPost")
                        .WithMany("UserPageToPosts")
                        .HasForeignKey("UserPostID");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.PageLike", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.UserPage", "UserPage")
                        .WithMany("PageLikes")
                        .HasForeignKey("UserPageID");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.PostLike", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.UserPost", "UserPost")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserPostID");
                });

            modelBuilder.Entity("SocialMediaForModelers.Model.UserPage", b =>
                {
                    b.HasOne("SocialMediaForModelers.Model.ApplicationUser", null)
                        .WithMany("UsersPage")
                        .HasForeignKey("ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
